# -*- coding: utf-8 -*-import OpenGL.GL as glfrom shader import ShaderProgramimport numpy as npclass Glight(object):    vertex_code = """        #version 330 core        layout(location = 0) in vec3 position;        out vec4 vertex_color;        void main()        {            // passthrough vertex shader            gl_Position.xyz = position;            gl_Position.w = 1;        }    """    fragment_code = """        #version 330 core        uniform vec2 light_position;        uniform vec3 light_color;        uniform float radius;        out vec4 out_color;        // in vec4 vertex_color;        void main()        {            float distance = length(light_position - gl_FragCoord.xy);            float attenuation = radius / pow(distance, 1.2);            out_color = vec4(                attenuation,                attenuation,                attenuation,                attenuation            ) * vec4(light_color, 1);        }    """    def __init__(self, color, position):        self.lightshader = ShaderProgram(self.vertex_code, self.fragment_code)        self.position = position        self.color = color        self.vertices = np.array([            [-1, -1, 0],            [-1, 1, 0],            [1, -1, 0],            [1, 1, 0],        ], dtype=np.float32)        self.VAO = gl.glGenVertexArrays(1)        gl.glBindVertexArray(self.VAO)        self.VBO = gl.glGenBuffers(1)        gl.glBindBuffer(gl.GL_ARRAY_BUFFER, self.VBO)        gl.glBufferData(gl.GL_ARRAY_BUFFER, self.vertices.nbytes, self.vertices, gl.GL_STATIC_DRAW)        gl.glEnableVertexAttribArray(0)    @property    def color(self):        return self.lightshader['light_color']    @color.setter    def color(self, value):        self.lightshader.bind()        self.lightshader['light_color'] = value    @property    def position(self):        return self.lightshader['light_position']    @position.setter    def position(self, value):        self.lightshader.bind()        self.lightshader['light_position'] = value    @property    def radius(self):        return self.lightshader['radius']    @radius.setter    def radius(self, value):        self.lightshader.bind()        self.lightshader['radius'] = value    def draw(self):        gl.glBindVertexArray(self.VAO)        gl.glBindBuffer(gl.GL_ARRAY_BUFFER, self.VBO)        try:            gl.glVertexAttribPointer(0, 3, gl.GL_FLOAT, gl.GL_FALSE, 0, None)            self.lightshader.bind()            # draw "count" points from the VBO            gl.glDrawArrays(gl.GL_TRIANGLE_STRIP, 0, len(self.vertices))        finally:            gl.glBindVertexArray(0)            gl.glUseProgram(0)            gl.glBindBuffer(gl.GL_ARRAY_BUFFER, 0)